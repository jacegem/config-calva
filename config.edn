;; https://github.com/seancorfield/vscode-calva-setup
{:customREPLCommandSnippets
 [{:name "Integrant - dev"
   :snippet (user/dev)}

  {:name "Add Libs Enclosing"
   :key "a"
   :snippet (tap>
             ((requiring-resolve 'clojure.tools.deps.alpha.repl/add-libs)
              '$enclosing-form))}
  {:name "Tap Define Binding"
   :key "d"
   :snippet (tap> (def $selection))}
  {:name "Tap Last Exception"
   :key "e"
   :snippet (tap> (Throwable->map *e))}
  {:name "Tap Define to Input"
   :key "i"
   :snippet (tap> (let [v (read-string (read-line))]
                    (def $selection v)))}
  {:name "Tap Namespace Publics"
   :key "n"
   :snippet (tap>
             (-> (find-ns '$ns)
                 (clojure.datafy/datafy)
                 :publics))}
  {:name "Tap Namespace Cleanup"
   :key "z"
   :snippet (tap>
             (when-let [ns (find-ns '$ns)]
               (tap> "Removing $ns... ")
               (run! #(try (ns-unalias ns %)
                           (catch Throwable _))
                     (keys (ns-aliases ns)))
               (run! #(try (ns-unmap ns %)
                           (catch Throwable _))
                     (keys (ns-interns ns)))
               (->> (ns-refers ns)
                    (remove (fn [[_ v]]
                              (.startsWith (str v) "#'clojure.core/")))
                    (map key)
                    (run! #(try (ns-unmap ns %)
                                (catch Throwable _))))))}
  {:name "Run Current Test"
   :key "c"
   :snippet (tap>
             (with-out-str
               (binding [clojure.test/*test-out* *out*]
                 (clojure.test/test-vars [#'$top-level-defined-symbol]))))}
  {:name "Run Tests"
   :key "t"
   :snippet (tap>
             (do
               (tap> "Testing $ns... ")
               (require '$ns)
               (clojure.test/run-tests '$ns)))}
  {:name "Run Tests For Source"
   :key "x"
   :snippet (tap>
             (some #(let [nt (symbol (str "$ns-" %))]
                      (when (try (require nt) true
                                 (catch Throwable _))
                        (tap> (str "Testing " nt "... "))
                        (clojure.test/run-tests nt)))
                   ["test" "expectations"]))}
  {:name "Portal Clear"
   :key "k"
   :snippet (portal.api/clear)}
  {:name "Portal Start"
   :key "p"
   :snippet (do
              (ns dev
                (:require [clojure.string :as str]))
              ;; this custom submit code can work with the portal
              ;; middleware or without it. in order to keep any
              ;; tap>'d values as the most recent, top-of-window
              ;; value -- so that the various portal viewer/expand
              ;; commands can always navigate to it, we need to
              ;; delay tap>'d value submission until after we
              ;; display any output, test reports, or errors.
              ;; we assume direct tap> handling until the portal
              ;; middleware is known to be in play, then switch to
              ;; a delayed submission, so that the order can be
              ;; preserved.
              ;; in addition, we suppress any results of evaluating
              ;; portal API calls, so that they don't interfere with
              ;; the top-of-window value.
              ;; in the absence of specific tap> calls, if the
              ;; middleware is in play, we just submit it to portal.
              (defonce ^{:doc "The last tap>'d value"}
                *v (atom nil))
              (defonce ^{:doc "Whether we've delayed tap>'ing a value."}
                tap-pending (atom false))
              (defonce ^{:doc "Whether to tap> (or delay)."}
                tap-direct (atom true))
              (defn submit*
                "The reloadable implementation of submit."
                [v]
                (let [m (try (meta v) (catch Exception _))]
                  (if (:portal.nrepl/eval m)
                    (let [{:keys [stdio report level]} v]
                      ;; if there's stderr output, always print it
                      ;; if we have an explicit tap pending print it
                      (when (and stdio
                                 (or @tap-pending
                                     (some #(= :err (:tag %)) stdio)))
                        ((requiring-resolve 'portal.api/submit) stdio))
                      ;; always print test reports
                      (when report
                        ((requiring-resolve 'portal.api/submit) report))
                      ;; always print errors
                      (if (= level :error)
                        ((requiring-resolve 'portal.api/submit) v)
                        ;; print anything except internal commands
                        (when-not (or (some-> v :code (str/includes? "portal.api/"))
                                      (some-> v :code (str/starts-with? "(tap>")))
                          (reset! tap-direct false)
                          ((requiring-resolve 'portal.api/submit) v)))
                      (when @tap-pending
                        (reset! tap-pending false)
                        ((requiring-resolve 'portal.api/submit) @dev/*v)))
                    (do
                      (when @tap-pending
                        (reset! tap-pending false)
                        ((requiring-resolve 'portal.api/submit) @dev/*v))
                      (reset! dev/*v v)
                      (if (or @tap-direct (string? v))
                        ((requiring-resolve 'portal.api/submit) v)
                        (reset! tap-pending true))))))
              (defonce ^{:doc "Fixed wrapper around submit*."}
                submit (fn [v] (submit* v)))
              (def ^{:doc "Atom for currently selected value."}
                portal
                ((requiring-resolve 'portal.api/open)
                 {:launcher :vs-code
                  :portal.launcher/window-title (System/getProperty "user.dir")}))
              (add-tap submit))}
  {:name "Tap Input Code"
   :key "q"
   :snippet (tap> (let [v (read-string (clojure.string/replace (read-line)
                                                               "*v"
                                                               "@dev/*v"))]
                    (eval v)))}
  {:name "Portal Viewer"
   :key "0"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-next-viewer state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand First"
   :key "1"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Second"
   :key "2"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Third"
   :key "3"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Fourth"
   :key "4"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Fifth"
   :key "5"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Fifth"
   :key "6"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Fifth"
   :key "7"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Fifth"
   :key "8"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}
  {:name "Portal Expand Fifth"
   :key "9"
   :snippet (portal.api/eval-str
             (str
              '(let [state portal.ui.state/state]
                 (-> (portal.ui.commands/select-none state)
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/select-child state))
                     (.then #(portal.ui.commands/toggle-expand state))
                     (.then #(portal.ui.commands/select-none state))))))}

  {:name "Portal open"
   :key "o"
   :snippet (require '[portal.api :as p]) (def p (p/open)) (add-tap #'p/submit)}]}
